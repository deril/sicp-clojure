(defn mul-interval [x y]
  (cond (>= (lower-bound x) 0)
        (cond (>= (lower-bound y) 0)
              (make-interval (* (lower-bound x) (lower-bound y))
                             (* (upper-bound x) (upper-bound y)))
              (<= (upper-bound y) 0)
              (make-interval (* (upper-bound x) (lower-bound y))
                             (* (lower-bound x) (upper-bound y)))
              :else
              (make-interval (* (upper-bound x) (lower-bound y))
                             (* (upper-bound x) (upper-bound y))))
        (<= (upper-bound x) 0)
        (cond (>= (lower-bound y) 0)
              (make-interval (* (lower-bound x) (upper-bound y))
                             (* (upper-bound x) (lower-bound y)))
              (<= (upper-bound y) 0)
              (make-interval (* (upper-bound x) (upper-bound y))
                             (* (lower-bound x) (lower-bound y)))
              :else
              (make-interval (* (lower-bound x) (upper-bound y))
                             (* (lower-bound x) (lower-bound y))))
        :else
        (cond (>= (lower-bound y) 0)
              (make-interval (* (lower-bound x) (upper-bound y))
                             (* (upper-bound x) (upper-bound y)))
              (<= (upper-bound y) 0)
              (make-interval (* (upper-bound x) (lower-bound y))
                             (* (lower-bound x) (lower-bound y)))
              :else
              (make-interval (min (* (lower-bound x) (upper-bound y))
                                  (* (upper-bound x) (lower-bound y)))
                             (max (* (lower-bound x) (lower-bound y))
                                  (* (upper-bound x) (upper-bound y)))))))
